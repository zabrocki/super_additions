load("http://garsia.math.yorku.ca/~zabrocki/superpartitions.py")
def add_horizonal_border_strip(self, h):
    r'''
    this function returns superpatition followed by the first pieri rule after self are shifted by 'h' cells
    
    INPUT:
    -"self" -- superpatition
    -"h" -- number of addition cells 
    OUPUT:
    -"superpatition"-- superpartition followed by the first pieri rule
    
    EXAMPLES::
    sage:   add_horizonal_border_strip([[4,1],[3]], 3)
    ...     [[4, 1; 3, 3],
             [4, 1; 4, 2],
             [3, 1; 5, 2],
             [4, 1; 5, 1],
             [3, 1; 6, 1],
             [4, 0; 4, 3],
             [3, 0; 5, 3],
             [4, 0; 5, 2],
             [3, 0; 6, 2],
             [4, 1; 6],
             [3, 1; 7]]
    
    '''
    self = SuperPartition(self).to_circled_diagram()
    sp=self[0][:]
    sp.append(0)
    rows_with_circle=[a[0] for a in self[1] ]
    nsp=[list(la)+[0] for la in Partition(sp).add_horizontal_border_strip(h)] 
    circle_location=[[]for i in range (len(nsp))]
    for x in range(len(nsp)):
        circle_location[x]=shift_circle_cells(self,nsp[x])
    s1 = [la[1] for la in circle_location]
    s2 = [la[0] for la in circle_location]
    for i in range(len(s1)):        
        k = [a[0] for a in s1[i]]
        j = [a[1] for a in s1[i]]
        for k1 in range(len(k)):
            circle_location[i][0][k[k1]]+=1
        if len(set(k))!= len(s1[i]) or len(set(j))!= len(s1[i]):
            circle_location.remove([s2[i],s1[i]])
    x=[[] for i in range(len(circle_location))]
    for i in range(len(circle_location)):
        x[i]= SuperPartition(SuperPartition.from_circled_diagram(circle_location[i][0],circle_location[i][1])).to_circled_diagram()
    test = [self[0],x]
    return test



def shift_circle_cells(self,nsp):
    r'''
    returns locations of circles that are bumped.
    INPUT:
        -"self"--: superpatition e.g. [[4,1],[3]].
        -"nsp"--:  partition after adding cells e.g. [4, 3, 3, 1, 0]
    OUTPUT:
        -"circle_location"--: a list of the first element is non-circle diagram, and the second
        element is circle_location.
        
    EXAMPLE::
        sage: shift_circle_cells([[4,1],[3]],[4, 3, 3, 1, 0])
        [[4, 3, 3, 1, 0], [[0, 4], [3, 1]]]
    
    '''
    sp=self[0][:]
    sp.append(0)
    circle_location=[]
    rows_with_circle=[a[0] for a in self[1] ]
    index=0
    k=0
    circle_location = [nsp,[]]
    for i in rows_with_circle:
        if i < len(nsp)-1:
            if sp[i]!=nsp[i]:             
                j=rows_with_circle[k] 
                circle_location[1].append([j+1,nsp[i+1]]) 
            else:
                circle_location[1].append(list(self[1][index])) 
            index+=1
        if i == len(nsp)-1: 
            if sp[i]!=nsp[i]:   
                j=rows_with_circle[k]
                circle_location[1].append([j+1,0])
            else:
                j=rows_with_circle[k]      
                circle_location[1].append(list(self[1][index]))
            index+=1
        k+=1
    return circle_location


def locate_cells(output_from_last_function):
    r'''''
     compares two partitions to find locations of the added cells
     input: two partitions e.g. (4,2),(4,4)
     output: a list of locations of cells
     '''''

    o1,o2=output_from_last_function[0],output_from_last_function[1]
    cell_location=[[] for i in range(len(o2)) ]
     
    for k in range(len(o2)):

        old_partition,new_partition=o1,o2[k][0]

        for i in range(len(old_partition)):
            if old_partition[i]!=new_partition[i]:
                for j in range(new_partition[i]-old_partition[i]):
                    cell_location[k].append((i,new_partition[i]-j-1))
        if len(new_partition)>len(old_partition):
            for i in range(new_partition[-1]):
                cell_location[k].append((len(new_partition)-1,i))
    return(cell_location)


def locate_unique_circle(output_from_last_function):
    
     
    r'''''
     gives legal locations of the unique circle described in second pieri rule
     input: cell_location: a list of locations of cells e.g.[(0, 6), (0, 5), (0, 4)]
            circle_locations: a list of locations of circles  e.g.[(2,1),(1,3)]
            partial_sieve_function: a list of numbers  e.g.[7,3,1]
     output: a list of legal locations of unique circles
     variables: row_with_cir: a list of numbers indicating which rows already have circles
                col_with_cel: a list of numbers indicating which columns have cells
                roww: a integer that is used to find which row does the unique circle belong to after knowing which column it is in.
     The second pieri rule says that there is a unique circle located in the column c such that:
         column c  does not contain any cell of Ω∗/Λ∗.
         there is a cell of Ω∗/Λ∗ in every column strictly to the left of column c
    '''''
    cell_location=locate_cells(output_from_last_function)
    circle_location=[a[1] for a in output_from_last_function[1]]
    partition=[a[0] for a in output_from_last_function[1]]

    legal_unique_circle_locations=[[] for i in range(len(partition)) ]
    for j in range(len(partition)):

        partition[j]=list(partition[j])+[0]
        row_with_cir=[circle_location[j][i][0] for i in(range(len(circle_location[j])))]
        col_with_cir=[circle_location[j][i][1] for i in(range(len(circle_location[j])))]
        col_with_cel=[cell_location[j][i][1] for i in(range(len(cell_location[j])))]
        for col in range(partition[j][0]+1):
            if col not in col_with_cir:
                if col not in col_with_cel:
                    for row in range(len(partition[j])):
                        if row not in row_with_cir:
                            l=list(range(col))
                            if set(l) <= set(col_with_cel):
                                roww=0
                                for i in partition[j]:
                                    if i>col:
                                        roww+=1
                                if roww==0:
                                    legal_unique_circle_locations[j].append((roww,col))
                                else:
                                     if partition[j][roww]<partition[roww-1]:
                                        legal_unique_circle_locations[j].append((roww,col))
    l=[] 
    for i in range(len(legal_unique_circle_locations)):
        legal_unique_circle_locations[i]=list(set(legal_unique_circle_locations[i]))
    for i in range(len(legal_unique_circle_locations)):
        if legal_unique_circle_locations[i]!=[]:
            l.append([output_from_last_function[1][i],legal_unique_circle_locations[i]])
    print(l)
    return sign_superpartition(l)


def sign_superpartition(x):
    r'''
    this fuction takes legal locations of unique circles and return it with plus or 
    minus sign by the second pieri rule.
    INPUT:
    -"x"-- a list of circle diagram and circle location converted by the second pieri rule.
    OUTPUT:
    -"sigh_sp"-- a list of superpartitions with plus or minus sign
    EXAMPLES::
    sage: sign_superpartition([[[[4, 3, 3, 1], [(0, 4), (3, 1)]], [(1, 3)]], [[[4, 4, 2, 1]]],etc.])
    ...   [[-1, [4, 3, 1; 3]],
          [-1, [4, 2, 1; 4]],
          [-1, [3, 2, 1; 5]],
          [1, [4, 1, 0; 6]],
          [1, [3, 1, 0; 7]]]
    
    '''
    og = x[:]
    sigh_sp=[[]for i in range(len(x))]
    count_circle = 0
    for i in range(len(x)):
        og[i]=x[i][0]
        og[i][1].append(x[i][1][0])
        for j in range(len(og[i][1])):
            if og[i][1][j][0] > og[i][1][len(og[i][1])-1][0]:
                count_circle+=1      
        sigh_sp[i].append((-1)**count_circle)
        sigh_sp[i].append( SuperPartition.from_circled_diagram(og[i][0],og[i][1]))        
        count_circle=0
    return sigh_sp


locate_unique_circle(add_horizonal_border_strip([[4,1],[3]], 3))

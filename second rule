import ast
load("http://garsia.math.yorku.ca/~zabrocki/superpartitions.py")
def add_horizonal_border_strip(self, h):


    '''this function returns locations of the circles after they are shifted by ``h``
        
    input:
        self : a circled diagram e.g. [[5,2,2,1], [(0,4),(2,1),(3,0)]] ; 
    variables: 
        h: an integer representing number of cells added
        sp : the “uncircled diagram” e.g. self: [[5,2,2,1], [(0,4),(2,1),(3,0)]] ; sp:[5,2,2,1]
        circle_location: a list indicating locations of circles. e.g. circle_location=[(1,4),(2,1)] ; meaning there is a circle at (1,4) and one at (2,1)
        rows with circle: a list of rows that have circles e.g. row_with_circle=[4,2,0] which means there’re three circles located at row4, row2 and row0.
        nsp1:a list of all partitions of size h and larger that differ by a horizontal border strip; notice that this list  does not take “insert values” as regular list does; when doing "nsp1[0].insert(0,0)” sage returns AttributeError: 'Partitions_all_with_category.element_class' object has no attribute 'insert'
        nsp: a copy of nsp1 in a regular list
    output:
        a list of circled diagrams e.g.[[[5, 3, 2, 2, 1], [[1, 2], [3, 1], [4, 0]]],
                                        [[5, 3, 2, 2, 1], [[0, 4], [3, 1], [4, 0]]],
                                        [[7, 3, 2, 1], [[1, 2], [2, 1], [3, 0]]],
                                        [[5, 4, 2, 1, 1], [[0, 4], [2, 1], [4, 0]]],
                                        [[5, 5, 2, 1], [[1, 4], [2, 1], [3, 0]]],
                                        [[6, 4, 2, 1], [[1, 3], [2, 1], [3, 0]]],
                                        [[5, 4, 2, 1, 1], [[1, 3], [2, 1], [4, 0]]],
                                        [[6, 3, 2, 1, 1], [[1, 2], [2, 1], [4, 0]]]]
    '''

 
    self = SuperPartition(self).to_circled_diagram()
    sp=self[0][:]
    sp.append(0)
    circle_location={}     
    rows_with_circle=[a[0]for a in self[1]]
    nsp=[list(la)+[0] for la in Partition(sp).add_horizontal_border_strip(h)]
    for x in range(len(nsp)):
        circle_location[str(nsp[x])]=shift_circle_cells(self,nsp[x])
    legal_circle_location=circle_location
 
    for k in circle_location.values():
        for i in range(len(k)):
            for j in range(len(k)-1):
                if i!=j:
                    if k[i][0] == k[j][0] or k[i][1]==k[j][1]:
                        del(legal_circle_location[legal_circle_location.keys()[legal_circle_location.values().index(k)]])
    circle_diagram = convert_form(legal_circle_location)
    x=[[] for i in range(len(circle_diagram))]
    l=[]
    for i in range(len(circle_diagram)):
        l.append( SuperPartition.from_circled_diagram(circle_diagram[i][0],circle_diagram[i][1]))
        x[i]= SuperPartition(l[i]).to_circled_diagram()
    test = []
    test.append(self[0])
    test.append(x)
    test = tuple(test)
    return test
def convert_form(legal_circle_location):
    

    '''''''input: '''''
    {'[5, 2, 2, 1, 0]': [[1, 2], [3, 1], [4, 0]],
    '[4, 3, 2, 1, 0]': [[0, 4], [3, 1], [4, 0]],
    '[7, 2, 1, 0]': [[1, 2], [2, 1], [3, 0]],
    '[4, 4, 1, 1, 0]': [[0, 4], [2, 1], [4, 0]],
    '[5, 4, 1, 0]': [[1, 4], [2, 1], [3, 0]],
    '[6, 3, 1, 0]': [[1, 3], [2, 1], [3, 0]],
    '[5, 3, 1, 1, 0]': [[1, 3], [2, 1], [4, 0]],
    '[6, 2, 1, 1, 0]': [[1, 2], [2, 1], [4, 0]]}

    
    output:
    [[[5, 3, 2, 2, 1], [[1, 2], [3, 1], [4, 0]]],
    [[5, 3, 2, 2, 1], [[0, 4], [3, 1], [4, 0]]],
    [[7, 3, 2, 1], [[1, 2], [2, 1], [3, 0]]],
    [[5, 4, 2, 1, 1], [[0, 4], [2, 1], [4, 0]]],
    [[5, 5, 2, 1], [[1, 4], [2, 1], [3, 0]]],
    [[6, 4, 2, 1], [[1, 3], [2, 1], [3, 0]]],
    [[5, 4, 2, 1, 1], [[1, 3], [2, 1], [4, 0]]],
    [[6, 3, 2, 1, 1], [[1, 2], [2, 1], [4, 0]]]]
    '''''
   
    i=0
    cell_diagram=[[] for x in range(len(legal_circle_location))]
    circle_location = [[]for x in range(len(legal_circle_location))]
    circle_diagram=[[]for x in range(len(legal_circle_location))]
    for k ,v in legal_circle_location.items():
        cell_diagram[i] = ast.literal_eval(k)
        circle_location[i] = v
        i+=1
    for i in range(len(cell_diagram)):
        for j in range(len(circle_location[i])):
            k =circle_location[i][j][0]
            cell_diagram[i][k]=cell_diagram[i][k]+1
        circle_diagram[i].append(cell_diagram[i])
        circle_diagram[i].insert(1,circle_location[i]) 

    return circle_diagram



def shift_circle_cells(self,nsp):
    
    '''''returns locations of circles that are bumped.
    input:
        self: a list ( circled diagram e.g. [[5,2,2,1], [(0,4),(2,1),(3,0)]] ); 
        nsp: a list (partition after adding cells e.g. [8, 2, 2, 1])
    output:
        list e.g. [[0, 4], [3, 1], [4, 0]]
    variables:
        sp : the “uncircled diagram” e.g. self: [[5,2,2,1], [(0,4),(2,1),(3,0)]] ; sp:[5,2,2,1]
        circle_location: a list indicating locations of circles. e.g. circle_location=[(1,4),(2,1)] ; meaning there is a circle at (1,4) and one at (2,1)
        rows with circle: a list of rows that have circles e.g. row_with_circle=[4,2,0] which means there’re three circles located at row4, row2 and row0.
        
    example:
        sage: shift_circle_cells([[5,2,2,1], [(0,4),(2,1),(3,0)]],[4, 3, 2, 1, 0])
        [[0, 4], [3, 1], [4, 0]]
        
    '''''
    sp=self[0][:]
    sp.append(0)
    circle_location=[]
    rows_with_circle=[a[0] for a in self[1]]
    index=0
    k=0
    for i in rows_with_circle:
        if i < len(nsp)-1:      
            if sp[i]!=nsp[i]: ###check if there’s a cell added to rows that have circle                 
                j=rows_with_circle[k] ##j is the row where circle is located
                circle_location.append([j+1,nsp[i+1]]) ##adding moved circle location
            else:
                circle_location.append(list(self[1][index])) ##adding locations for the circles that did not move
            index+=1              
        if i == len(nsp)-1:     ##special case where the circle is at the last row                                     
            if sp[i]!=nsp[i]:   ##check if there’s a cell added to rows that have circle                         
                j=rows_with_circle[k]        
                circle_location.append([j+1,0])  #if cells are added to the last row and the last row happen to have a circle, we have to append a new row to our diagram and put the circle there
            else:
                j=rows_with_circle[k]        
                circle_location.append(list(self[1][index]))
            index+=1
        k+=1
    return circle_location

def locate_cells(output_from_last_function):
    r'''''
     compares two partitions to find locations of the added cells
     input: two partitions e.g. (4,2),(4,4)
     output: a list of locations of cells
     '''''

    o1,o2=output_from_last_function[0],output_from_last_function[1]
    cell_location=[[] for i in range(len(o2)) ]
     
    for k in range(len(o2)):

        old_partition,new_partition=o1,o2[k][0]

        for i in range(len(old_partition)):
            if old_partition[i]!=new_partition[i]:
                for j in range(new_partition[i]-old_partition[i]):
                    cell_location[k].append((i,new_partition[i]-j-1))
        if len(new_partition)>len(old_partition):
            for i in range(new_partition[-1]):
                cell_location[k].append((len(new_partition)-1,i))
    return(cell_location)


def locate_unique_circle(output_from_last_function):
    
     
    r'''''
     gives legal locations of the unique circle described in second pieri rule
     input: cell_location: a list of locations of cells e.g.[(0, 6), (0, 5), (0, 4)]
            circle_locations: a list of locations of circles  e.g.[(2,1),(1,3)]
            partial_sieve_function: a list of numbers  e.g.[7,3,1]
     output: a list of legal locations of unique circles
     variables: row_with_cir: a list of numbers indicating which rows already have circles
                col_with_cel: a list of numbers indicating which columns have cells
                roww: a integer that is used to find which row does the unique circle belong to after knowing which column it is in.
     The second pieri rule says that there is a unique circle located in the column c such that:
         column c  does not contain any cell of Ω∗/Λ∗.
         there is a cell of Ω∗/Λ∗ in every column strictly to the left of column c
    '''''
    cell_location=locate_cells(output_from_last_function)
    circle_location=[a[1] for a in output_from_last_function[1]]
    partition=[a[0] for a in output_from_last_function[1]]

    legal_unique_circle_locations=[[] for i in range(len(partition)) ]
    for j in range(len(partition)):

        partition[j]=list(partition[j])+[0]
        row_with_cir=[circle_location[j][i][0] for i in(range(len(circle_location[j])))]
        col_with_cir=[circle_location[j][i][1] for i in(range(len(circle_location[j])))]
        col_with_cel=[cell_location[j][i][1] for i in(range(len(cell_location[j])))]
        for col in range(partition[j][0]+1):
            if col not in col_with_cir:
                if col not in col_with_cel:
                    for row in range(len(partition[j])):
                        if row not in row_with_cir:
                            l=list(range(col))
                            if set(l) <= set(col_with_cel):
                                roww=0
                                for i in partition[j]:
                                    if i>col:
                                        roww+=1
                                if roww==0:
                                    legal_unique_circle_locations[j].append((roww,col))
                                else:
                                     if partition[j][roww]<partition[roww-1]:
                                        legal_unique_circle_locations[j].append((roww,col))

#return(legal_unique_circle_locations)  
    l=[] 
    for i in range(len(legal_unique_circle_locations)):
        legal_unique_circle_locations[i]=list(set(legal_unique_circle_locations[i]))
    for i in range(len(legal_unique_circle_locations)):
        if legal_unique_circle_locations[i]!=[]:
            l.append([output_from_last_function[1][i],legal_unique_circle_locations[i]])
    return(l)






self=[[4,1],[3]]
h=3
l=([4, 3, 1],
[[[5, 3, 3], [(1, 3), (3, 0)]],
 [[6, 3, 2], [(1, 3), (3, 0)]],
 [[6, 4, 1], [(1, 4), (2, 1)]],
 [[6, 3, 1, 1], [(1, 3), (2, 1)]],
 [[5, 3, 2, 1], [(1, 3), (3, 1)]],
 [[5, 4, 2], [(1, 4), (3, 0)]],
 [[4, 4, 2, 1], [(0, 4), (3, 1)]],
 [[4, 3, 3, 1], [(0, 4), (3, 1)]],
 [[4, 4, 3], [(0, 4), (3, 0)]],
 [[5, 4, 1, 1], [(1, 4), (2, 1)]],
 [[7, 3, 1], [(1, 3), (2, 1)]]])
v=add_horizonal_border_strip(self, h)


x = locate_unique_circle(v)
def convert_beta(x):
    og = x[:]
    other=[[]for i in range(len(x))]
    count_circle = 0
    for i in range(len(x)):
        og[i]=x[i][0]
        og[i][1].append(x[i][1][0])
        for j in range(len(og[i][1])):
            if og[i][1][j][0] > og[i][1][len(og[i][1])-1][0]:
                count_circle+=1      
        other[i].append((-1)**count_circle)
        other[i].append( SuperPartition.from_circled_diagram(og[i][0],og[i][1]))        
        count_circle=0
    return other


convert_beta(x)
